---
title: "Chapter 1"
---

This tutorial focuses on getting you started in R and RStudio. R is a programming language that you will write code in and RStudio is a program that makes working in R easier. There are two strategies for working with R and RStudio. The user can either install R and RStudio on their computer and work with them *locally* OR the user can work with them *remotely* via an internet browser. In this course, we will work with R and RStudio remotely via [PositCloud](https://posit.cloud/){target="_blank"}.

::: callout-note
Interested students can refer to Appendix A for technical details on installing R and RStudio locally on their computer. If you already have R and/or RStudio installed, we recommend updating to the latest version of R and RStudio. Appendix B has more details on how to do that.
:::

## Intended Learning Outcomes {#sec-ilo-intro}

-   Understand the difference between R and RStudio

-   Become familiar with the main components in RStudio

-   Be able to write and run code in the console and in a R Script

-   Be able to install add-on packages

-   Be able to get help for packages and functions

-   Be able to customize RStudio

## Introduction to R and RStudio {#sec-intro-rstudio_ide}

As previously mentioned, R is a programming language that we will use to write code for working with data. RStudio is an Integrated Development Environment (IDE) for R. RStudio is dependent on R but separate from it. It provides a useful interface for working with R and has several advantages over the default R interface. Think of it as knowing English and using a plain text editor like NotePad to write a book versus using a word processor like Microsoft Word. You could do it, but it would be much harder without things like spell-checking and formatting and you wouldn't be able to use some of the advanced features that Word has developed. In a similar way, you can use R without RStudio but we wouldn't recommend it. RStudio serves as a text editor, file manager, spreadsheet viewer, and much more. The key thing to remember is that although you will do all of your work using RStudio for this course, you are actually working with two pieces of software, which means that from time to time, both of them may have separate updates.

RStudio runs on Mac, PC, and Linux machines and provides a simplified interface that looks and feels identical on all of them. While it can be installed on your own computer, for this course you will be asked to login to a shared RStudio Cloud server ([PositCloud](https://posit.cloud/){target="_blank"}) from a web browser. There are several advantages to using the web browser application of RStudio Cloud. It allows you to write and access R code wherever you go. It even works on your tablet because it does not require installation. It also makes it much easier to collaborate with others, and since no installation is required, you can work on projects on any device as long as you are connected to the internet. Another significant advantage of using RStudio in the cloud is that you can run time-consuming scripts without bogging down your own device. However, because RStudio Cloud requires an internet connection, it will run slower if your internet connection is not fast or stable.

### Guided Tour of RStudio

The interface for working with RStudio both in the cloud or locally is largely the same and consists of 4 window "panes". Several of the panes are further subdivided into multiple tabs.

Let's look in more detail at each of these four windows. By default, the upper left pane is the **source pane**, where you view, write, and edit code from files and view data tables in a spreadsheet format. When you first open RStudio, this pane won't display until we open a document or load in some data -- don't worry, we'll get to that soon.

The lower left pane is the **console pane**, where you can view the output of your coding and computations. It is also possible to write code directly into the console. However, keep in mind that the code you write in the console will run and can create objects that will be saved in the environment, but the code itself won't be saved. You need to write your code into a script in the source pane to save it, which we'll cover in more detail in @sec-intro-scripts below.

The right panes have several different tabs that show you information about your code. The most used tabs in the upper right pane is the **Environment** tab. The Environment tab lists some information about the *objects* that you have defined in your code.

In the lower right pane are tabs for browsing files, viewing plots, managing R packages, reading help files, and for viewing html documents and presentations. The most used tabs are the **Files** tab for directory structure, the **Plots** tab for plots made in a script, the **Packages** tab for managing add-on packages (see @sec-packages), and the **Help** tab which displays help pages for R functions and packages. We'll learn more about the Help tab in @sec-function-help.

### Rstudio menus

At the top of the RStudio Desktop there are the following set of menus.

File

:   The File menu is primarily for the opening, closing and saving of files. Often, these files will be R scripts that open in the script editor. But they could also be R data file, RMarkdown documents, Shiny apps, etc. Here, we can also open and close RStudio *projects*, which is a very useful organizing feature to which we will return below.

Edit

:   The Edit menu primarily provides tools for standard file editing operations such as copy, cut, paste, and search and replace, undo and redo, etc. It also provides code folding features, which is very useful for reducing clutter when editing relatively large R scripts.

Code

:   The Code menu provides many useful tools for making editing and running code considerably easier and more efficient. We will explore these features in more depth in subsequent sections, but they include the adding and removing code comments, reformatting code, jumping to functions within and between scripts, creating code regions that can then be run independently, and so on.

View

:   The View menu primarily provides options to move around RStudio quickly. These options are all bound to key combinations, as are many other RStudio features, and learning these key combinations is certainly worthwhile because of the eventual speed and efficiency gains that they provide.

Plots

:   The Plots menu primarily provides features that are also available in the Plots window itself.

Session

:   The Session menu allows us to start new separate RStudio sessions. These then run independently of one another. Also in the Session menu, we can restart the R session in the background, which is a useful session. Remember that RStudio itself is just a front to an R session that runs in the background. Sometimes it is a good idea to restart the R session so as to start in a clean and fresh state. This can be done through the Session menu *Restart R* option, which is also bound to the keys Ctrl+Shift+F10. Also in Session are options to set R's *working directory*. This concept of a working directory is a simple but important one, and we will cover it below.

Build

:   The Build menu provides features for running scripts for *software builds*. This is particularly used for creating R packages.

Debug

:   The Debug menu provides tools for debugging our R code. Debugging usually only becomes a necessity when R programming per se, and not something that is usually required when writing individual commands or scripts of commands.

Profile

:   The Profile menu provides tools for profiling the running and efficiency of our R code. Code efficiency is certainly not something that those new to R need to worry about, but when writing relatively complex code, profiling can identify bottlenecks.

Tools

:   The Tools menu provides miscellaneous tools such as for working with version control using Git, accessing the computer's operating system's command line interface, installing and updating packages (as could also be done in the Package window), viewing and modifying keyboard shortcuts. Here, we can also access the *Global Options* and *Project Options*. Global Options is where all the general R and RStudio settings are set. One immediately useful setting here is the *Appearance* setting, which can allow us to change the font, font size, and colour theme of RStudio to suit our preference. Project Options are for the RStudio project specific settings. We will return to these below.

Help

:   The Help menu provides much the same information as can be found in the Help window. It also provides some additional links to online resources, such as RStudio's cheatsheets[^1], which are excellent concise guides to many different R and RStudio topics. Also available in the Help menu are tools to access RStudio internal diagnostics. This is only that is needed if and when RStudio seems to be malfunctioning.

[^1]: https://www.rstudio.com/resources/cheatsheets/

## Writing R Code {#sec-intro-scripts}

R is a command based system. We type commands, R translates them into machine instructions, which our computer then executes, and then we often, but not necessarily, get back some output. The commands can be typed into the R console, or else they can be put into a script and run as a batch.

### R Console

When learning R, it is usually best to start with typing commands in the R console. When we open RStudio initially, our console will usually look something like this:

```         
R version 4.3.1 (2023-06-16 ucrt) -- "Beagle Scouts"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> 
```
